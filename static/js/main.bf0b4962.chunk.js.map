{"version":3,"sources":["components/OpenFiles.tsx","components/FileList.tsx","components/Tier.tsx","components/TierList.tsx","components/app/directory.ts","components/app/useFiles.ts","components/app/App.tsx","index.tsx"],"names":["OpenFiles","props","openFilesHandler","className","type","multiple","onChange","directory","webkitdirectory","FileList","files","addTiersAndDownload","deleteFiles","onClick","fileElements","slice","map","file","key","id","path","name","length","push","nanoid","fileList","TIER_ATTRIBUTES","Tier","deleteTier","tierData","updateTierData","handleChange","e","preventDefault","labels","target","changedTierAttribute","innerText","changedTierValue","value","tierAttributesHTML","attribute","htmlFor","autoComplete","TierList","tiers","setTiers","tiersCopy","matchingTierIdx","findIndex","tier","matchingTier","filter","tierElements","REFERENT_ANNOTATION_TIER_DATA","LEFT_DISLOCATION_TIER_DATA","REFERENT_FORM_TIER_DATA","TierData","FileData","properties","typeName","useFiles","useState","setFiles","addTiersToFiles","console","log","indexOf","tiersTemplate","tierIdx","templateTierId","speaker","category","tierTemplate","concat","join","newText","text","replace","addTiersToFile","openedFiles","Array","from","forEach","filePath","undefined","webkitRelativePath","hasPath","then","fileText","newFile","prev","filesWithTiers","fileToDownload","fileBlob","Blob","FileSaver","saveAs","downloadFile","filesToDownload","zip","JSZip","generateAsync","content","downloadFiles","this","defaultTierData","INITIAL_TIER_DATA","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf0b4962.chunk.js","sourcesContent":["import React, { ChangeEvent } from 'react';\n\ntype OpenFilesProps = {\n  openFilesHandler: (e: ChangeEvent<HTMLInputElement>) => void;\n}\n\nfunction OpenFiles(props: OpenFilesProps) {\n  const { openFilesHandler } = props;\n  return (\n    <div className=\"row\">\n      <div className=\"openFilesForm stack-small\">\n        <h2>\n          Upload Files\n        </h2>\n        <form>\n          <input\n            type=\"file\"\n            multiple\n            onChange={openFilesHandler}\n          />\n        </form>\n      </div>\n      <div className=\"openFilesForm stack-small\">\n        <h2>\n          Upload Folder\n        </h2>\n        <form>\n          <input\n            type=\"file\"\n            // @ts-ignore\n            directory=\"\"\n            webkitdirectory=\"\"\n            onChange={openFilesHandler}\n          />\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default OpenFiles;\n","import React, { ReactElement } from 'react';\nimport { FileData } from './app/directory';\nimport { nanoid } from 'nanoid';\n\ninterface FileListProps {\n  files: FileData[]\n  addTiersAndDownload: () => void\n  deleteFiles: () => void\n}\n\nfunction FileList({ files, addTiersAndDownload, deleteFiles }: FileListProps) {\n\n  const MAX_FILES = 5;\n\n  const fileList = () => {\n    const fileElements: ReactElement[] = files.slice(0, MAX_FILES).map((file) => (\n      <li key={file.id}>\n        {`${file.path}/${file.name}`}\n      </li>\n    ));\n\n    if (files.length > MAX_FILES) {\n      fileElements.push(<li key={nanoid()}>...</li>);\n    }\n\n    return fileElements;\n  };\n\n  return (\n    <div className=\"\">\n      <h2>\n        Files:\n      </h2>\n      <button\n        type=\"button\"\n        className=\"btn full\"\n        onClick={addTiersAndDownload}\n      >\n        Add Tiers and Download\n      </button>\n      <button\n        type=\"button\"\n        className=\"btn btn__danger full\"\n        onClick={deleteFiles}\n      >\n        Reset Files\n      </button>\n      <ul>\n        {fileList()}\n      </ul>\n    </div>\n  );\n}\n\nexport default FileList;\n","import React, { ChangeEvent } from 'react';\nimport { TierData } from './app/App';\n\ntype TierAttribute = 'speaker' | 'type' | 'category';\nconst TIER_ATTRIBUTES: TierAttribute[] = ['speaker', 'type', 'category'];\n\ninterface TierProps {\n  tierData: TierData\n  updateTierData: (id: string, attribute: TierAttribute, value: string) => void\n  deleteTier: (id: string) => void\n}\n\nfunction Tier({ deleteTier, tierData, updateTierData }: TierProps) {\n  function handleChange(e: ChangeEvent<HTMLInputElement>) {\n    e.preventDefault();\n    const { labels } = e.target;\n    if (labels) {\n      const changedTierAttribute = labels[0].innerText as TierAttribute;\n      const changedTierValue = e.target.value;\n      updateTierData(tierData.id, changedTierAttribute, changedTierValue);\n    }\n  }\n\n  const tierAttributesHTML = TIER_ATTRIBUTES.map(\n    (attribute) => (\n      <form\n        key={`${tierData.id}-${attribute}`}\n        className=\"tierForm\"\n      >\n        <label htmlFor={`${tierData.id}-${attribute}`}>\n          {attribute}\n        </label>\n        <input\n          id={`${tierData.id}-${attribute}`}\n          type=\"text\"\n          autoComplete=\"off\"\n          value={tierData[attribute]}\n          onChange={handleChange}\n        />\n      </form>\n    ),\n  );\n\n  return (\n    <li className=\"tier\">\n      {tierAttributesHTML}\n      <button type=\"button\" className=\"btn btn__danger\" onClick={() => deleteTier(tierData.id)}>\n        delete\n      </button>\n    </li>\n  );\n}\n\nexport default Tier;\n","import React from 'react';\nimport { LEFT_DISLOCATION_TIER_DATA, REFERENT_ANNOTATION_TIER_DATA, REFERENT_FORM_TIER_DATA, TierData } from './app/App';\nimport Tier from './Tier';\n\ninterface TierListProps {\n  tiers: TierData[],\n  setTiers: (tiers: TierData[]) => void,\n}\n\nfunction TierList({ tiers, setTiers }: TierListProps) {\n\n  function addTier() {\n    setTiers([...tiers, new TierData()]);\n  }\n\n  function updateTierData(id: string, attribute: string, value: string) {\n    const tiersCopy = [...tiers];\n    const matchingTierIdx = tiers.findIndex((tier) => tier.id === id);\n    const matchingTier = tiersCopy[matchingTierIdx];\n\n    if (matchingTierIdx != null) {\n      tiersCopy[matchingTierIdx] = { ...matchingTier, [attribute]: value };\n      setTiers(tiersCopy);\n    }\n  }\n\n  function deleteTier(id: string) {\n    setTiers(tiers.filter((tier) => tier.id !== id));\n  }\n\n  const tierElements = tiers.map(\n    (tierData) => (\n      <Tier\n        key={tierData.id}\n        tierData={tierData}\n        updateTierData={updateTierData}\n        deleteTier={deleteTier}\n      />\n    ),\n  );\n\n  return (\n    <div className=\"stack-small\">\n      <h2>Tiers to Add</h2>\n      <div className=\"col\">\n        <button\n          type=\"button\"\n          className=\"btn\"\n          onClick={() => setTiers(REFERENT_ANNOTATION_TIER_DATA)}\n        >\n          referent annotation default\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn\"\n          onClick={() => setTiers(LEFT_DISLOCATION_TIER_DATA)}\n        >\n          left dislocation default\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn\"\n          onClick={() => setTiers(REFERENT_FORM_TIER_DATA)}\n        >\n          Referent form annotation default\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn\"\n          onClick={addTier}\n        >\n          add new tier\n        </button>\n      </div>\n      <ul>\n        {tierElements}\n      </ul>\n    </div>\n  );\n}\n\nexport default TierList;\n","import JSZip from 'jszip';\n\nexport type FileData = {\n  typeName: 'FileData'\n  id: string\n  name: string\n  path: string\n  text: string\n}\n\nexport class Directory {\n  typeName: 'Directory'\n\n  name: string\n\n  contents: DirectoryEntry[]\n\n  constructor(name: string, contents?: DirectoryEntry[]) {\n    this.typeName = 'Directory';\n    this.name = name;\n    this.contents = contents || [];\n  }\n\n  mapFiles(callbackfn: (file: FileData) => FileData): Directory {\n    const newContents = this.contents.map((entry) => {\n      if ('contents' in entry) {\n        return entry.mapFiles(callbackfn);\n      }\n      return callbackfn(entry);\n    });\n\n    return (new Directory(this.name, newContents));\n  }\n\n  forEach(callbackfn: (entry: DirectoryEntry) => void): void {\n    this.contents.forEach((entry) => {\n      callbackfn(entry);\n      if ('contents' in entry) {\n        entry.forEach(callbackfn);\n      }\n    });\n  }\n\n  forEachFile(callbackfn: (file: FileData) => void): void {\n    this.forEach((entry) => {\n      if (!('contents' in entry)) {\n        callbackfn(entry);\n      }\n    });\n  }\n\n  hasSingleFile(): boolean {\n    return (this.contents.length === 1)\n      && ('id' in this.contents[0]);\n  }\n\n  /*\n  // Given a subfolder root, zip all files in this directory to that root.\n  private zipDirectoryToFolder(folderZip: JSZip): void {\n    this.contents.forEach((entry) => {\n      if (entry.typeName === 'FileData') {\n        folderZip.file()\n      }\n    });\n  }\n\n  zipDirectory(): JSZip {\n    const zip = new JSZip();\n    this.zipDirectoryToFolder(zip);\n  }\n   */\n}\n\nexport type DirectoryEntry = FileData | Directory\n\ninterface IHasPath extends File {\n  webkitRelativePath: string\n}\n\nexport function FileData(properties: Omit<FileData, 'typeName'>): FileData {\n  return {\n    typeName: 'FileData',\n    ...properties,\n  };\n}\n\nexport function hasPath(file: File): file is IHasPath {\n  return (file as IHasPath).webkitRelativePath !== undefined;\n}\n","import { ChangeEvent, useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport JSZip from 'jszip';\nimport FileSaver from 'file-saver';\nimport { TierData } from './App';\nimport { FileData, hasPath } from './directory';\n\nfunction useFiles() {\n  const [files, setFiles] = useState<FileData[]>([]);\n\n  function openFilesHandler(e: ChangeEvent<HTMLInputElement>) {\n    e.preventDefault();\n    const openedFiles = e.target.files;\n\n    if (openedFiles != null) {\n      const openedFilesArray = Array.from(openedFiles);\n      openedFilesArray.forEach((file) => {\n        let filePath: string;\n        if (hasPath(file)) {\n          filePath = file.webkitRelativePath;\n        } else {\n          filePath = '';\n        }\n\n        file.text().then((fileText) => {\n          const newFile = FileData({\n            id: nanoid(),\n            name: file.name,\n            path: filePath,\n            text: fileText,\n          });\n\n          setFiles(\n            (prev) => [...prev, newFile],\n          );\n        });\n      });\n    }\n  }\n\n  function addTiersToFile(file: FileData, tiers: TierData[]): FileData {\n    // Only add tiers to .exb files\n    if (file.name.indexOf('.exb') === -1) {\n      return file;\n    }\n\n    function tierTemplate(tier: TierData, templateTierId: number) {\n      return (\n        `<tier id=\"${templateTierId}\" speaker=\"${tier.speaker}\" category=\"${tier.category}\" type=\"${tier.type}\">`\n        + '</tier>'\n      );\n    }\n\n    const tiersTemplate = tiers.map(\n      (tier, tierIdx) => tierTemplate(tier, 200 + tierIdx),\n    )\n      .concat(['</basic-body>'])\n      .join('\\n');\n\n    const newText = file.text.replace('</basic-body>', tiersTemplate);\n\n    return FileData({\n      id: file.id,\n      name: file.name,\n      path: file.path,\n      text: newText,\n    });\n  }\n\n  function addTiersToFiles(tiers: TierData[]): FileData[] {\n    console.log(files);\n    return files.map((file) => addTiersToFile(file, tiers));\n  }\n\n  function downloadFile(fileToDownload: FileData) {\n    const fileBlob = new Blob([fileToDownload.text], { type: 'text/plain' });\n    FileSaver.saveAs(fileBlob, fileToDownload.name);\n  }\n\n  function downloadFiles(filesToDownload: FileData[]) {\n    const zip = new JSZip();\n\n    filesToDownload.forEach((file) => {\n      if (file.path === '') {\n        zip.file(file.name, file.text);\n      } else {\n        zip.file(file.path, file.text);\n      }\n    });\n\n    console.log(zip);\n    zip.generateAsync({ type: 'blob' })\n      .then((content) => FileSaver.saveAs(content, 'exb_files_tiers_added.zip'));\n  }\n\n  function addTiersAndDownload(tiers: TierData[]) {\n    const filesWithTiers = addTiersToFiles(tiers);\n\n    console.log(filesWithTiers);\n\n    if (filesWithTiers.length === 1) {\n      downloadFile(filesWithTiers[0]);\n    } else {\n      downloadFiles(filesWithTiers);\n    }\n  }\n\n  function deleteFiles() {\n    setFiles([]);\n  }\n\n  return {\n    files, openFilesHandler, addTiersAndDownload, deleteFiles,\n  };\n}\n\nexport default useFiles;\n","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport OpenFiles from '../OpenFiles';\nimport FileList from '../FileList';\nimport TierList from '../TierList';\nimport useFiles from './useFiles';\n\nexport class TierData {\n  id: string\n\n  speaker: string = ''\n\n  type: string = ''\n\n  category: string = ''\n\n  constructor() {\n    this.id = `tier-${nanoid()}`;\n  }\n}\n\nfunction defaultTierData(category: string) {\n  return {\n    ...new TierData(),\n    speaker: 'norm',\n    type: 'a',\n    category,\n  };\n}\n\nconst INITIAL_TIER_DATA: TierData[] = [\n  defaultTierData(''),\n];\n\nexport const REFERENT_ANNOTATION_TIER_DATA: TierData[] = [\n  defaultTierData('referent'),\n  defaultTierData('r-type'),\n  defaultTierData('conj_referent'),\n];\n\nexport const LEFT_DISLOCATION_TIER_DATA: TierData[] = [\n  defaultTierData('ld_referent'),\n  defaultTierData('ld_direction'),\n  defaultTierData('ld_np'),\n  defaultTierData('ld_pronoun'),\n  defaultTierData('ld_intervening'),\n];\n\nexport const REFERENT_FORM_TIER_DATA: TierData[] = [\n  defaultTierData('ref-form'),\n  defaultTierData('ref-mod'),\n  defaultTierData('ref-form2'),\n  defaultTierData('ref-mod2'),\n  defaultTierData('ref-form3'),\n  defaultTierData('ref-mod3'),\n  defaultTierData('ref-tracking'),\n  defaultTierData('ref-tracking2'),\n  defaultTierData('ref-tracking3'),\n];\n\nfunction App() {\n  const {\n    files, openFilesHandler, addTiersAndDownload, deleteFiles,\n  } = useFiles();\n  const [tiers, setTiers] = useState<TierData[]>(INITIAL_TIER_DATA);\n\n  return (\n    <div className=\"col stack-small\">\n      <h1>Add Exmaralda Tiers</h1>\n      <OpenFiles openFilesHandler={openFilesHandler} />\n      <div className=\"row filesTiers\">\n        <div className=\"col\">\n          <FileList\n            files={files}\n            addTiersAndDownload={() => addTiersAndDownload(tiers)}\n            deleteFiles={deleteFiles}\n          />\n        </div>\n        <TierList tiers={tiers} setTiers={setTiers} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}